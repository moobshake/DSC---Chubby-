syntax = "proto3";
package NodeComm;
//protoc --go_out=. --go-grpc_out=. --go-grpc_opt=paths=source_relative NodeComm.proto
option go_package = "/nodecomm;nodecomm";

//Enums between 0 and 99 are common across message types
//Enums after 100 are unique to a message

message NodeMessage {
    PeerRecord fromPRecord = 1;
    int32 ToID = 2;
    MessageType Type = 3;
    int32 Spare = 4;
    string Comment = 5;
    StandardBody StandardBody = 6;
    enum MessageType {
        Empty = 0;
        Ack = 1;
        Warning = 2;
        Error = 3;
        NotInNetwork = 4;
        KeepAlive = 101;
	    Standard = 102;
    }
}

message CoordinationMessage {
    PeerRecord FromPRecord = 1;
    int32 spare = 2;
    MessageType Type = 3;
    string Comment = 4;
    repeated PeerRecord PeerRecords = 5;
    enum MessageType {
        Empty = 0;
        Ack = 1;
        Warning = 2;
        Error = 3;
        NotInNetwork = 4;
        ElectionResult = 101;
        ElectSelf = 102;
        RejectElect = 103;
        ReqToJoin = 104;
        RejectJoin = 105;
        PeerInformation = 106;
        RedirectToCoordinator = 107;
        ReqToMerge = 108;
        RejectMerge = 109;
        ApptNewCoordinator = 110;
        ReqToLeave = 111;
        BadNodeReport = 112;
        NotMaster = 113;
    }
}

//1 -> False; 2 -> True
message ElectionStatus {
    int32 OngoingElection = 1;
    int32 IsWinning = 2;
    int32 Active = 3;
    int32 TimeoutDuration = 4;
}

message PeerRecord {
    int32 Id = 1;
    string Address = 2;
    string Port = 3;
}
message StandardBody {
    string message = 1;
}

message ControlMessage {
    MessageType Type = 1;
    int32 Spare = 2;
    string Comment = 3;
    ParamsBody ParamsBody = 4;
    NodeMessage NodeMessage = 5;
    enum MessageType {
        Empty = 0;
        Ack = 1;
        Warning = 2;
        Error = 3;
        NotInNetwork = 4;
        StopListening = 101;
        InitParams = 102;
        UpdateParams = 103;
        GetStatus = 104;
        GetPeers = 105;
        AddPeer = 106;
        DelPeer = 107;
        Okay = 108;
        Message = 109;
        RawMessage = 110;
        JoinNetwork = 111;
        LeaveNetwork = 112;
        StartElection = 113;
        GetParams = 114;
        //Events
        SubscribeFileModification = 115;
        SubscribeLockAquisition = 116;
        SubscribeLockConflict = 117;
        SubscribeMasterFailover = 118;
        PublishFileModification = 119;
        PublishLockAquisition = 120;
        PublishLockConflict = 121;
        PublishMasterFailover = 122;
    }
}
message ParamsBody {
    int32 Spare = 1;
    repeated PeerRecord PeerRecords = 2;
    PeerRecord MyPRecord = 3;
    int32 IdOfMaster = 4;
    ElectionStatus ElectionStatus = 5;
    int32 Verbose = 6;
    int32 LockGenerationNumber = 7;
    string NodeDataPath = 8;
    string NodeLockPath = 9;
}

message ClientMessage {
    int32 ClientID = 1;
    MessageType Type = 2;
    int32 Spare = 3;
    int32 Message = 4;
    FileBody FileBody = 5;
    PeerRecord ClientAddress = 6;
    string StringMessages = 7;
    enum MessageType {
        Empty = 0;
        Ack = 1;
        Warning = 2;
        Error = 3;
        NotInNetwork = 4;
        FileWrite = 101;
        FileRead = 102;
        ReqLock = 103;
        RelLock = 104;
        JoinNetwork = 105;
        LeaveNetwork = 106;
        FindMaster = 107;
        SubscribeFileModification = 108;
        SubscribeLockAquisition = 109;
        SubscribeLockConflict = 110;
        SubscribeMasterFailover = 111;
        ListFile = 112;
    }
}

message FileBody{
    string Name = 1;
}

message ServerMessage {
    MessageType Type = 1;
    enum MessageType {
        Empty = 0;
        Ack = 1;
        Warning = 2;
        Error = 3;
        NotInNetwork = 4;
    }
}

message EventMessage {
    MessageType Type = 1;
    string file_name = 2;
    string lock_name = 3;
    enum MessageType {
        Empty = 0;
        Ack = 1;
        Warning = 2;
        Error = 3;
        NotInNetwork = 4;
        MasterFailOver = 101;
        FileContentModified = 102;
        LockAquisition = 103;
        ConflictingLock = 104;
    }
}

service NodeCommService {
    rpc KeepAlive(NodeMessage) returns (NodeMessage){}
    rpc SendMessage(NodeMessage) returns (NodeMessage) {}

    rpc SendCoordinationMessage(CoordinationMessage) returns (CoordinationMessage) {}

    rpc Shutdown(ControlMessage) returns (ControlMessage){}
    rpc SendControlMessage(ControlMessage) returns (ControlMessage){}

    rpc SendClientMessage(ClientMessage) returns (ClientMessage){}
    rpc SendServerMessage(ServerMessage) returns (ClientMessage){}

    // Events are published from Server to Client
    rpc SendEventMessage(EventMessage) returns (EventMessage){}
}