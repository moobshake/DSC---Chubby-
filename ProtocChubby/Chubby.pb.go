// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ProtocChubby/Chubby.proto

package protocchubby

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeMessage_MessageType int32

const (
	NodeMessage_Empty        NodeMessage_MessageType = 0
	NodeMessage_Ack          NodeMessage_MessageType = 1
	NodeMessage_Warning      NodeMessage_MessageType = 2
	NodeMessage_Error        NodeMessage_MessageType = 3
	NodeMessage_NotInNetwork NodeMessage_MessageType = 4
	NodeMessage_KeepAlive    NodeMessage_MessageType = 101
	NodeMessage_Standard     NodeMessage_MessageType = 102
)

// Enum value maps for NodeMessage_MessageType.
var (
	NodeMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "KeepAlive",
		102: "Standard",
	}
	NodeMessage_MessageType_value = map[string]int32{
		"Empty":        0,
		"Ack":          1,
		"Warning":      2,
		"Error":        3,
		"NotInNetwork": 4,
		"KeepAlive":    101,
		"Standard":     102,
	}
)

func (x NodeMessage_MessageType) Enum() *NodeMessage_MessageType {
	p := new(NodeMessage_MessageType)
	*p = x
	return p
}

func (x NodeMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[0].Descriptor()
}

func (NodeMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[0]
}

func (x NodeMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeMessage_MessageType.Descriptor instead.
func (NodeMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{0, 0}
}

type CoordinationMessage_MessageType int32

const (
	CoordinationMessage_Empty                 CoordinationMessage_MessageType = 0
	CoordinationMessage_Ack                   CoordinationMessage_MessageType = 1
	CoordinationMessage_Warning               CoordinationMessage_MessageType = 2
	CoordinationMessage_Error                 CoordinationMessage_MessageType = 3
	CoordinationMessage_NotInNetwork          CoordinationMessage_MessageType = 4
	CoordinationMessage_ElectionResult        CoordinationMessage_MessageType = 101
	CoordinationMessage_ElectSelf             CoordinationMessage_MessageType = 102
	CoordinationMessage_RejectElect           CoordinationMessage_MessageType = 103
	CoordinationMessage_ReqToJoin             CoordinationMessage_MessageType = 104
	CoordinationMessage_RejectJoin            CoordinationMessage_MessageType = 105
	CoordinationMessage_PeerInformation       CoordinationMessage_MessageType = 106
	CoordinationMessage_RedirectToCoordinator CoordinationMessage_MessageType = 107
	CoordinationMessage_ReqToMerge            CoordinationMessage_MessageType = 108
	CoordinationMessage_RejectMerge           CoordinationMessage_MessageType = 109
	CoordinationMessage_ApptNewCoordinator    CoordinationMessage_MessageType = 110
	CoordinationMessage_ReqToLeave            CoordinationMessage_MessageType = 111
	CoordinationMessage_BadNodeReport         CoordinationMessage_MessageType = 112
	CoordinationMessage_NotMaster             CoordinationMessage_MessageType = 113
	CoordinationMessage_WakeUpAndJoinNetwork  CoordinationMessage_MessageType = 114
)

// Enum value maps for CoordinationMessage_MessageType.
var (
	CoordinationMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "ElectionResult",
		102: "ElectSelf",
		103: "RejectElect",
		104: "ReqToJoin",
		105: "RejectJoin",
		106: "PeerInformation",
		107: "RedirectToCoordinator",
		108: "ReqToMerge",
		109: "RejectMerge",
		110: "ApptNewCoordinator",
		111: "ReqToLeave",
		112: "BadNodeReport",
		113: "NotMaster",
		114: "WakeUpAndJoinNetwork",
	}
	CoordinationMessage_MessageType_value = map[string]int32{
		"Empty":                 0,
		"Ack":                   1,
		"Warning":               2,
		"Error":                 3,
		"NotInNetwork":          4,
		"ElectionResult":        101,
		"ElectSelf":             102,
		"RejectElect":           103,
		"ReqToJoin":             104,
		"RejectJoin":            105,
		"PeerInformation":       106,
		"RedirectToCoordinator": 107,
		"ReqToMerge":            108,
		"RejectMerge":           109,
		"ApptNewCoordinator":    110,
		"ReqToLeave":            111,
		"BadNodeReport":         112,
		"NotMaster":             113,
		"WakeUpAndJoinNetwork":  114,
	}
)

func (x CoordinationMessage_MessageType) Enum() *CoordinationMessage_MessageType {
	p := new(CoordinationMessage_MessageType)
	*p = x
	return p
}

func (x CoordinationMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoordinationMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[1].Descriptor()
}

func (CoordinationMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[1]
}

func (x CoordinationMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoordinationMessage_MessageType.Descriptor instead.
func (CoordinationMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{1, 0}
}

type ControlMessage_MessageType int32

const (
	ControlMessage_Empty         ControlMessage_MessageType = 0
	ControlMessage_Ack           ControlMessage_MessageType = 1
	ControlMessage_Warning       ControlMessage_MessageType = 2
	ControlMessage_Error         ControlMessage_MessageType = 3
	ControlMessage_NotInNetwork  ControlMessage_MessageType = 4
	ControlMessage_StopListening ControlMessage_MessageType = 101
	ControlMessage_InitParams    ControlMessage_MessageType = 102
	ControlMessage_UpdateParams  ControlMessage_MessageType = 103
	ControlMessage_GetStatus     ControlMessage_MessageType = 104
	ControlMessage_GetPeers      ControlMessage_MessageType = 105
	ControlMessage_AddPeer       ControlMessage_MessageType = 106
	ControlMessage_DelPeer       ControlMessage_MessageType = 107
	ControlMessage_Okay          ControlMessage_MessageType = 108
	ControlMessage_Message       ControlMessage_MessageType = 109
	ControlMessage_RawMessage    ControlMessage_MessageType = 110
	ControlMessage_JoinNetwork   ControlMessage_MessageType = 111
	ControlMessage_LeaveNetwork  ControlMessage_MessageType = 112
	ControlMessage_StartElection ControlMessage_MessageType = 113
	ControlMessage_GetParams     ControlMessage_MessageType = 114
	//Events
	ControlMessage_PublishFileModification ControlMessage_MessageType = 119
	ControlMessage_PublishLockAquisition   ControlMessage_MessageType = 120
	ControlMessage_PublishLockConflict     ControlMessage_MessageType = 121
	ControlMessage_PublishMasterFailover   ControlMessage_MessageType = 122
)

// Enum value maps for ControlMessage_MessageType.
var (
	ControlMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "StopListening",
		102: "InitParams",
		103: "UpdateParams",
		104: "GetStatus",
		105: "GetPeers",
		106: "AddPeer",
		107: "DelPeer",
		108: "Okay",
		109: "Message",
		110: "RawMessage",
		111: "JoinNetwork",
		112: "LeaveNetwork",
		113: "StartElection",
		114: "GetParams",
		119: "PublishFileModification",
		120: "PublishLockAquisition",
		121: "PublishLockConflict",
		122: "PublishMasterFailover",
	}
	ControlMessage_MessageType_value = map[string]int32{
		"Empty":                   0,
		"Ack":                     1,
		"Warning":                 2,
		"Error":                   3,
		"NotInNetwork":            4,
		"StopListening":           101,
		"InitParams":              102,
		"UpdateParams":            103,
		"GetStatus":               104,
		"GetPeers":                105,
		"AddPeer":                 106,
		"DelPeer":                 107,
		"Okay":                    108,
		"Message":                 109,
		"RawMessage":              110,
		"JoinNetwork":             111,
		"LeaveNetwork":            112,
		"StartElection":           113,
		"GetParams":               114,
		"PublishFileModification": 119,
		"PublishLockAquisition":   120,
		"PublishLockConflict":     121,
		"PublishMasterFailover":   122,
	}
)

func (x ControlMessage_MessageType) Enum() *ControlMessage_MessageType {
	p := new(ControlMessage_MessageType)
	*p = x
	return p
}

func (x ControlMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[2].Descriptor()
}

func (ControlMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[2]
}

func (x ControlMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlMessage_MessageType.Descriptor instead.
func (ControlMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{5, 0}
}

type LockMessage_LockType int32

const (
	LockMessage_Empty     LockMessage_LockType = 0
	LockMessage_ReadLock  LockMessage_LockType = 1
	LockMessage_WriteLock LockMessage_LockType = 2
)

// Enum value maps for LockMessage_LockType.
var (
	LockMessage_LockType_name = map[int32]string{
		0: "Empty",
		1: "ReadLock",
		2: "WriteLock",
	}
	LockMessage_LockType_value = map[string]int32{
		"Empty":     0,
		"ReadLock":  1,
		"WriteLock": 2,
	}
)

func (x LockMessage_LockType) Enum() *LockMessage_LockType {
	p := new(LockMessage_LockType)
	*p = x
	return p
}

func (x LockMessage_LockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockMessage_LockType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[3].Descriptor()
}

func (LockMessage_LockType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[3]
}

func (x LockMessage_LockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockMessage_LockType.Descriptor instead.
func (LockMessage_LockType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{7, 0}
}

type ClientMessage_MessageType int32

const (
	ClientMessage_Empty                     ClientMessage_MessageType = 0
	ClientMessage_Ack                       ClientMessage_MessageType = 1
	ClientMessage_Warning                   ClientMessage_MessageType = 2
	ClientMessage_Error                     ClientMessage_MessageType = 3
	ClientMessage_NotInNetwork              ClientMessage_MessageType = 4
	ClientMessage_FileWrite                 ClientMessage_MessageType = 101
	ClientMessage_FileRead                  ClientMessage_MessageType = 102
	ClientMessage_ReqLock                   ClientMessage_MessageType = 103
	ClientMessage_RelLock                   ClientMessage_MessageType = 104
	ClientMessage_JoinNetwork               ClientMessage_MessageType = 105
	ClientMessage_LeaveNetwork              ClientMessage_MessageType = 106
	ClientMessage_FindMaster                ClientMessage_MessageType = 107
	ClientMessage_SubscribeFileModification ClientMessage_MessageType = 108
	ClientMessage_SubscribeLockAquisition   ClientMessage_MessageType = 109
	ClientMessage_SubscribeLockConflict     ClientMessage_MessageType = 110
	ClientMessage_SubscribeMasterFailover   ClientMessage_MessageType = 111
	ClientMessage_ListFile                  ClientMessage_MessageType = 112
	ClientMessage_RedirectToCoordinator     ClientMessage_MessageType = 113
	ClientMessage_ReadLock                  ClientMessage_MessageType = 114
	ClientMessage_WriteLock                 ClientMessage_MessageType = 115
	ClientMessage_InvalidLock               ClientMessage_MessageType = 116
	ClientMessage_ConfirmCoordinator        ClientMessage_MessageType = 117
	ClientMessage_ReplicaWrites             ClientMessage_MessageType = 118
	ClientMessage_ListLocks                 ClientMessage_MessageType = 119
)

// Enum value maps for ClientMessage_MessageType.
var (
	ClientMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "FileWrite",
		102: "FileRead",
		103: "ReqLock",
		104: "RelLock",
		105: "JoinNetwork",
		106: "LeaveNetwork",
		107: "FindMaster",
		108: "SubscribeFileModification",
		109: "SubscribeLockAquisition",
		110: "SubscribeLockConflict",
		111: "SubscribeMasterFailover",
		112: "ListFile",
		113: "RedirectToCoordinator",
		114: "ReadLock",
		115: "WriteLock",
		116: "InvalidLock",
		117: "ConfirmCoordinator",
		118: "ReplicaWrites",
		119: "ListLocks",
	}
	ClientMessage_MessageType_value = map[string]int32{
		"Empty":                     0,
		"Ack":                       1,
		"Warning":                   2,
		"Error":                     3,
		"NotInNetwork":              4,
		"FileWrite":                 101,
		"FileRead":                  102,
		"ReqLock":                   103,
		"RelLock":                   104,
		"JoinNetwork":               105,
		"LeaveNetwork":              106,
		"FindMaster":                107,
		"SubscribeFileModification": 108,
		"SubscribeLockAquisition":   109,
		"SubscribeLockConflict":     110,
		"SubscribeMasterFailover":   111,
		"ListFile":                  112,
		"RedirectToCoordinator":     113,
		"ReadLock":                  114,
		"WriteLock":                 115,
		"InvalidLock":               116,
		"ConfirmCoordinator":        117,
		"ReplicaWrites":             118,
		"ListLocks":                 119,
	}
)

func (x ClientMessage_MessageType) Enum() *ClientMessage_MessageType {
	p := new(ClientMessage_MessageType)
	*p = x
	return p
}

func (x ClientMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[4].Descriptor()
}

func (ClientMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[4]
}

func (x ClientMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientMessage_MessageType.Descriptor instead.
func (ClientMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{8, 0}
}

type FileBodyMessage_MessageType int32

const (
	FileBodyMessage_Empty        FileBodyMessage_MessageType = 0
	FileBodyMessage_Ack          FileBodyMessage_MessageType = 1
	FileBodyMessage_Warning      FileBodyMessage_MessageType = 2
	FileBodyMessage_Error        FileBodyMessage_MessageType = 3
	FileBodyMessage_NotInNetwork FileBodyMessage_MessageType = 4
	FileBodyMessage_ReadMode     FileBodyMessage_MessageType = 101
	FileBodyMessage_WriteMode    FileBodyMessage_MessageType = 102
	FileBodyMessage_InvalidLock  FileBodyMessage_MessageType = 103
)

// Enum value maps for FileBodyMessage_MessageType.
var (
	FileBodyMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "ReadMode",
		102: "WriteMode",
		103: "InvalidLock",
	}
	FileBodyMessage_MessageType_value = map[string]int32{
		"Empty":        0,
		"Ack":          1,
		"Warning":      2,
		"Error":        3,
		"NotInNetwork": 4,
		"ReadMode":     101,
		"WriteMode":    102,
		"InvalidLock":  103,
	}
)

func (x FileBodyMessage_MessageType) Enum() *FileBodyMessage_MessageType {
	p := new(FileBodyMessage_MessageType)
	*p = x
	return p
}

func (x FileBodyMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileBodyMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[5].Descriptor()
}

func (FileBodyMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[5]
}

func (x FileBodyMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileBodyMessage_MessageType.Descriptor instead.
func (FileBodyMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{9, 0}
}

type ServerMessage_MessageType int32

const (
	ServerMessage_Empty        ServerMessage_MessageType = 0
	ServerMessage_Ack          ServerMessage_MessageType = 1
	ServerMessage_Warning      ServerMessage_MessageType = 2
	ServerMessage_Error        ServerMessage_MessageType = 3
	ServerMessage_NotInNetwork ServerMessage_MessageType = 4
)

// Enum value maps for ServerMessage_MessageType.
var (
	ServerMessage_MessageType_name = map[int32]string{
		0: "Empty",
		1: "Ack",
		2: "Warning",
		3: "Error",
		4: "NotInNetwork",
	}
	ServerMessage_MessageType_value = map[string]int32{
		"Empty":        0,
		"Ack":          1,
		"Warning":      2,
		"Error":        3,
		"NotInNetwork": 4,
	}
)

func (x ServerMessage_MessageType) Enum() *ServerMessage_MessageType {
	p := new(ServerMessage_MessageType)
	*p = x
	return p
}

func (x ServerMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[6].Descriptor()
}

func (ServerMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[6]
}

func (x ServerMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerMessage_MessageType.Descriptor instead.
func (ServerMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{10, 0}
}

type EventMessage_MessageType int32

const (
	EventMessage_Empty               EventMessage_MessageType = 0
	EventMessage_Ack                 EventMessage_MessageType = 1
	EventMessage_Warning             EventMessage_MessageType = 2
	EventMessage_Error               EventMessage_MessageType = 3
	EventMessage_NotInNetwork        EventMessage_MessageType = 4
	EventMessage_MasterFailOver      EventMessage_MessageType = 101
	EventMessage_FileContentModified EventMessage_MessageType = 102
	EventMessage_LockAquisition      EventMessage_MessageType = 103
	EventMessage_ConflictingLock     EventMessage_MessageType = 104
)

// Enum value maps for EventMessage_MessageType.
var (
	EventMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "MasterFailOver",
		102: "FileContentModified",
		103: "LockAquisition",
		104: "ConflictingLock",
	}
	EventMessage_MessageType_value = map[string]int32{
		"Empty":               0,
		"Ack":                 1,
		"Warning":             2,
		"Error":               3,
		"NotInNetwork":        4,
		"MasterFailOver":      101,
		"FileContentModified": 102,
		"LockAquisition":      103,
		"ConflictingLock":     104,
	}
)

func (x EventMessage_MessageType) Enum() *EventMessage_MessageType {
	p := new(EventMessage_MessageType)
	*p = x
	return p
}

func (x EventMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtocChubby_Chubby_proto_enumTypes[7].Descriptor()
}

func (EventMessage_MessageType) Type() protoreflect.EnumType {
	return &file_ProtocChubby_Chubby_proto_enumTypes[7]
}

func (x EventMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventMessage_MessageType.Descriptor instead.
func (EventMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{11, 0}
}

type NodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPRecord  *PeerRecord             `protobuf:"bytes,1,opt,name=fromPRecord,proto3" json:"fromPRecord,omitempty"`
	ToID         int32                   `protobuf:"varint,2,opt,name=ToID,proto3" json:"ToID,omitempty"`
	Type         NodeMessage_MessageType `protobuf:"varint,3,opt,name=Type,proto3,enum=main.NodeMessage_MessageType" json:"Type,omitempty"`
	Spare        int32                   `protobuf:"varint,4,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Comment      string                  `protobuf:"bytes,5,opt,name=Comment,proto3" json:"Comment,omitempty"`
	StandardBody *StandardBody           `protobuf:"bytes,6,opt,name=StandardBody,proto3" json:"StandardBody,omitempty"`
}

func (x *NodeMessage) Reset() {
	*x = NodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMessage) ProtoMessage() {}

func (x *NodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMessage.ProtoReflect.Descriptor instead.
func (*NodeMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{0}
}

func (x *NodeMessage) GetFromPRecord() *PeerRecord {
	if x != nil {
		return x.FromPRecord
	}
	return nil
}

func (x *NodeMessage) GetToID() int32 {
	if x != nil {
		return x.ToID
	}
	return 0
}

func (x *NodeMessage) GetType() NodeMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return NodeMessage_Empty
}

func (x *NodeMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *NodeMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NodeMessage) GetStandardBody() *StandardBody {
	if x != nil {
		return x.StandardBody
	}
	return nil
}

type CoordinationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPRecord *PeerRecord                     `protobuf:"bytes,1,opt,name=FromPRecord,proto3" json:"FromPRecord,omitempty"`
	Spare       int32                           `protobuf:"varint,2,opt,name=spare,proto3" json:"spare,omitempty"`
	Type        CoordinationMessage_MessageType `protobuf:"varint,3,opt,name=Type,proto3,enum=main.CoordinationMessage_MessageType" json:"Type,omitempty"`
	Comment     string                          `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	PeerRecords []*PeerRecord                   `protobuf:"bytes,5,rep,name=PeerRecords,proto3" json:"PeerRecords,omitempty"`
}

func (x *CoordinationMessage) Reset() {
	*x = CoordinationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinationMessage) ProtoMessage() {}

func (x *CoordinationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinationMessage.ProtoReflect.Descriptor instead.
func (*CoordinationMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{1}
}

func (x *CoordinationMessage) GetFromPRecord() *PeerRecord {
	if x != nil {
		return x.FromPRecord
	}
	return nil
}

func (x *CoordinationMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *CoordinationMessage) GetType() CoordinationMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return CoordinationMessage_Empty
}

func (x *CoordinationMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CoordinationMessage) GetPeerRecords() []*PeerRecord {
	if x != nil {
		return x.PeerRecords
	}
	return nil
}

//1 -> False; 2 -> True
type ElectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OngoingElection int32 `protobuf:"varint,1,opt,name=OngoingElection,proto3" json:"OngoingElection,omitempty"`
	IsWinning       int32 `protobuf:"varint,2,opt,name=IsWinning,proto3" json:"IsWinning,omitempty"`
	Active          int32 `protobuf:"varint,3,opt,name=Active,proto3" json:"Active,omitempty"`
	TimeoutDuration int32 `protobuf:"varint,4,opt,name=TimeoutDuration,proto3" json:"TimeoutDuration,omitempty"`
}

func (x *ElectionStatus) Reset() {
	*x = ElectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionStatus) ProtoMessage() {}

func (x *ElectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionStatus.ProtoReflect.Descriptor instead.
func (*ElectionStatus) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{2}
}

func (x *ElectionStatus) GetOngoingElection() int32 {
	if x != nil {
		return x.OngoingElection
	}
	return 0
}

func (x *ElectionStatus) GetIsWinning() int32 {
	if x != nil {
		return x.IsWinning
	}
	return 0
}

func (x *ElectionStatus) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ElectionStatus) GetTimeoutDuration() int32 {
	if x != nil {
		return x.TimeoutDuration
	}
	return 0
}

type PeerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Port    string `protobuf:"bytes,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *PeerRecord) Reset() {
	*x = PeerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRecord) ProtoMessage() {}

func (x *PeerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRecord.ProtoReflect.Descriptor instead.
func (*PeerRecord) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{3}
}

func (x *PeerRecord) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PeerRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerRecord) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type StandardBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StandardBody) Reset() {
	*x = StandardBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardBody) ProtoMessage() {}

func (x *StandardBody) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardBody.ProtoReflect.Descriptor instead.
func (*StandardBody) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{4}
}

func (x *StandardBody) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ControlMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=main.ControlMessage_MessageType" json:"Type,omitempty"`
	Spare       int32                      `protobuf:"varint,2,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Comment     string                     `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	ParamsBody  *ParamsBody                `protobuf:"bytes,4,opt,name=ParamsBody,proto3" json:"ParamsBody,omitempty"`
	NodeMessage *NodeMessage               `protobuf:"bytes,5,opt,name=NodeMessage,proto3" json:"NodeMessage,omitempty"`
}

func (x *ControlMessage) Reset() {
	*x = ControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessage) ProtoMessage() {}

func (x *ControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessage.ProtoReflect.Descriptor instead.
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{5}
}

func (x *ControlMessage) GetType() ControlMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ControlMessage_Empty
}

func (x *ControlMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ControlMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ControlMessage) GetParamsBody() *ParamsBody {
	if x != nil {
		return x.ParamsBody
	}
	return nil
}

func (x *ControlMessage) GetNodeMessage() *NodeMessage {
	if x != nil {
		return x.NodeMessage
	}
	return nil
}

type ParamsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spare                int32           `protobuf:"varint,1,opt,name=Spare,proto3" json:"Spare,omitempty"`
	PeerRecords          []*PeerRecord   `protobuf:"bytes,2,rep,name=PeerRecords,proto3" json:"PeerRecords,omitempty"`
	MyPRecord            *PeerRecord     `protobuf:"bytes,3,opt,name=MyPRecord,proto3" json:"MyPRecord,omitempty"`
	IdOfMaster           int32           `protobuf:"varint,4,opt,name=IdOfMaster,proto3" json:"IdOfMaster,omitempty"`
	ElectionStatus       *ElectionStatus `protobuf:"bytes,5,opt,name=ElectionStatus,proto3" json:"ElectionStatus,omitempty"`
	Verbose              int32           `protobuf:"varint,6,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	LockGenerationNumber int32           `protobuf:"varint,7,opt,name=LockGenerationNumber,proto3" json:"LockGenerationNumber,omitempty"`
	NodeDataPath         string          `protobuf:"bytes,8,opt,name=NodeDataPath,proto3" json:"NodeDataPath,omitempty"`
	NodeLockPath         string          `protobuf:"bytes,9,opt,name=NodeLockPath,proto3" json:"NodeLockPath,omitempty"`
}

func (x *ParamsBody) Reset() {
	*x = ParamsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamsBody) ProtoMessage() {}

func (x *ParamsBody) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamsBody.ProtoReflect.Descriptor instead.
func (*ParamsBody) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{6}
}

func (x *ParamsBody) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ParamsBody) GetPeerRecords() []*PeerRecord {
	if x != nil {
		return x.PeerRecords
	}
	return nil
}

func (x *ParamsBody) GetMyPRecord() *PeerRecord {
	if x != nil {
		return x.MyPRecord
	}
	return nil
}

func (x *ParamsBody) GetIdOfMaster() int32 {
	if x != nil {
		return x.IdOfMaster
	}
	return 0
}

func (x *ParamsBody) GetElectionStatus() *ElectionStatus {
	if x != nil {
		return x.ElectionStatus
	}
	return nil
}

func (x *ParamsBody) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

func (x *ParamsBody) GetLockGenerationNumber() int32 {
	if x != nil {
		return x.LockGenerationNumber
	}
	return 0
}

func (x *ParamsBody) GetNodeDataPath() string {
	if x != nil {
		return x.NodeDataPath
	}
	return ""
}

func (x *ParamsBody) GetNodeLockPath() string {
	if x != nil {
		return x.NodeLockPath
	}
	return ""
}

type LockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      LockMessage_LockType `protobuf:"varint,1,opt,name=Type,proto3,enum=main.LockMessage_LockType" json:"Type,omitempty"`
	Sequencer string               `protobuf:"bytes,2,opt,name=sequencer,proto3" json:"sequencer,omitempty"`
	TimeStamp string               `protobuf:"bytes,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	LockDelay int32                `protobuf:"varint,4,opt,name=LockDelay,proto3" json:"LockDelay,omitempty"`
}

func (x *LockMessage) Reset() {
	*x = LockMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockMessage) ProtoMessage() {}

func (x *LockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockMessage.ProtoReflect.Descriptor instead.
func (*LockMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{7}
}

func (x *LockMessage) GetType() LockMessage_LockType {
	if x != nil {
		return x.Type
	}
	return LockMessage_Empty
}

func (x *LockMessage) GetSequencer() string {
	if x != nil {
		return x.Sequencer
	}
	return ""
}

func (x *LockMessage) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *LockMessage) GetLockDelay() int32 {
	if x != nil {
		return x.LockDelay
	}
	return 0
}

type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID       int32                     `protobuf:"varint,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	Type           ClientMessage_MessageType `protobuf:"varint,2,opt,name=Type,proto3,enum=main.ClientMessage_MessageType" json:"Type,omitempty"`
	Spare          int32                     `protobuf:"varint,3,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Message        int32                     `protobuf:"varint,4,opt,name=Message,proto3" json:"Message,omitempty"`
	FileBody       *FileBodyMessage          `protobuf:"bytes,5,opt,name=FileBody,proto3" json:"FileBody,omitempty"`
	ClientAddress  *PeerRecord               `protobuf:"bytes,6,opt,name=ClientAddress,proto3" json:"ClientAddress,omitempty"`
	StringMessages string                    `protobuf:"bytes,7,opt,name=StringMessages,proto3" json:"StringMessages,omitempty"`
	Lock           *LockMessage              `protobuf:"bytes,8,opt,name=Lock,proto3" json:"Lock,omitempty"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{8}
}

func (x *ClientMessage) GetClientID() int32 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *ClientMessage) GetType() ClientMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ClientMessage_Empty
}

func (x *ClientMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ClientMessage) GetMessage() int32 {
	if x != nil {
		return x.Message
	}
	return 0
}

func (x *ClientMessage) GetFileBody() *FileBodyMessage {
	if x != nil {
		return x.FileBody
	}
	return nil
}

func (x *ClientMessage) GetClientAddress() *PeerRecord {
	if x != nil {
		return x.ClientAddress
	}
	return nil
}

func (x *ClientMessage) GetStringMessages() string {
	if x != nil {
		return x.StringMessages
	}
	return ""
}

func (x *ClientMessage) GetLock() *LockMessage {
	if x != nil {
		return x.Lock
	}
	return nil
}

// This message is used when sending over a file through a stream
type FileBodyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        FileBodyMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=main.FileBodyMessage_MessageType" json:"Type,omitempty"`
	FileName    string                      `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileContent []byte                      `protobuf:"bytes,3,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *FileBodyMessage) Reset() {
	*x = FileBodyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBodyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBodyMessage) ProtoMessage() {}

func (x *FileBodyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBodyMessage.ProtoReflect.Descriptor instead.
func (*FileBodyMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{9}
}

func (x *FileBodyMessage) GetType() FileBodyMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return FileBodyMessage_Empty
}

func (x *FileBodyMessage) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileBodyMessage) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ServerMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=main.ServerMessage_MessageType" json:"Type,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{10}
}

func (x *ServerMessage) GetType() ServerMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ServerMessage_Empty
}

type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     EventMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=main.EventMessage_MessageType" json:"Type,omitempty"`
	FileName string                   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	LockName string                   `protobuf:"bytes,3,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtocChubby_Chubby_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ProtocChubby_Chubby_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_ProtocChubby_Chubby_proto_rawDescGZIP(), []int{11}
}

func (x *EventMessage) GetType() EventMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return EventMessage_Empty
}

func (x *EventMessage) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EventMessage) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

var File_ProtocChubby_Chubby_proto protoreflect.FileDescriptor

var file_ProtocChubby_Chubby_proto_rawDesc = []byte{
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x43, 0x68, 0x75, 0x62, 0x62, 0x79, 0x2f, 0x43,
	0x68, 0x75, 0x62, 0x62, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0xda, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x70, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x68, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x66, 0x22, 0xbe,
	0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x39, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x66, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x68, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6a, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65,
	0x71, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x10, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x10, 0x71, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x41,
	0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x72, 0x22,
	0x9a, 0x01, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0a,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xef, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a,
	0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x68, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x10, 0x6a, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x10, 0x6b, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x6b, 0x61, 0x79, 0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x10, 0x6f, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x77, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x78,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x10, 0x7a, 0x22, 0xfa, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x09, 0x4d, 0x79, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x09, 0x4d, 0x79, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x49, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x32, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x22,
	0x87, 0x06, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x33, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0xba, 0x03, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69,
	0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x4c, 0x6f,
	0x63, 0x6b, 0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x10,
	0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x10, 0x69, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x10, 0x6a, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x6b, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6d,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x6f, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x10, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x10,
	0x71, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x72, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x74, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x75, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x10, 0x76, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x10, 0x77, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x66, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x67, 0x22,
	0x91, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x10, 0x04, 0x22, 0xa0, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x66, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x67, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x68, 0x32, 0x96, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32,
	0xd4, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xde, 0x01, 0x0a, 0x18, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x32, 0x94, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x42, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0x97,
	0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x1c, 0x5a, 0x1a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x63, 0x68, 0x75, 0x62, 0x62, 0x79, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x63, 0x68, 0x75, 0x62, 0x62, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ProtocChubby_Chubby_proto_rawDescOnce sync.Once
	file_ProtocChubby_Chubby_proto_rawDescData = file_ProtocChubby_Chubby_proto_rawDesc
)

func file_ProtocChubby_Chubby_proto_rawDescGZIP() []byte {
	file_ProtocChubby_Chubby_proto_rawDescOnce.Do(func() {
		file_ProtocChubby_Chubby_proto_rawDescData = protoimpl.X.CompressGZIP(file_ProtocChubby_Chubby_proto_rawDescData)
	})
	return file_ProtocChubby_Chubby_proto_rawDescData
}

var file_ProtocChubby_Chubby_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_ProtocChubby_Chubby_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ProtocChubby_Chubby_proto_goTypes = []interface{}{
	(NodeMessage_MessageType)(0),         // 0: main.NodeMessage.MessageType
	(CoordinationMessage_MessageType)(0), // 1: main.CoordinationMessage.MessageType
	(ControlMessage_MessageType)(0),      // 2: main.ControlMessage.MessageType
	(LockMessage_LockType)(0),            // 3: main.LockMessage.LockType
	(ClientMessage_MessageType)(0),       // 4: main.ClientMessage.MessageType
	(FileBodyMessage_MessageType)(0),     // 5: main.FileBodyMessage.MessageType
	(ServerMessage_MessageType)(0),       // 6: main.ServerMessage.MessageType
	(EventMessage_MessageType)(0),        // 7: main.EventMessage.MessageType
	(*NodeMessage)(nil),                  // 8: main.NodeMessage
	(*CoordinationMessage)(nil),          // 9: main.CoordinationMessage
	(*ElectionStatus)(nil),               // 10: main.ElectionStatus
	(*PeerRecord)(nil),                   // 11: main.PeerRecord
	(*StandardBody)(nil),                 // 12: main.StandardBody
	(*ControlMessage)(nil),               // 13: main.ControlMessage
	(*ParamsBody)(nil),                   // 14: main.ParamsBody
	(*LockMessage)(nil),                  // 15: main.LockMessage
	(*ClientMessage)(nil),                // 16: main.ClientMessage
	(*FileBodyMessage)(nil),              // 17: main.FileBodyMessage
	(*ServerMessage)(nil),                // 18: main.ServerMessage
	(*EventMessage)(nil),                 // 19: main.EventMessage
}
var file_ProtocChubby_Chubby_proto_depIdxs = []int32{
	11, // 0: main.NodeMessage.fromPRecord:type_name -> main.PeerRecord
	0,  // 1: main.NodeMessage.Type:type_name -> main.NodeMessage.MessageType
	12, // 2: main.NodeMessage.StandardBody:type_name -> main.StandardBody
	11, // 3: main.CoordinationMessage.FromPRecord:type_name -> main.PeerRecord
	1,  // 4: main.CoordinationMessage.Type:type_name -> main.CoordinationMessage.MessageType
	11, // 5: main.CoordinationMessage.PeerRecords:type_name -> main.PeerRecord
	2,  // 6: main.ControlMessage.Type:type_name -> main.ControlMessage.MessageType
	14, // 7: main.ControlMessage.ParamsBody:type_name -> main.ParamsBody
	8,  // 8: main.ControlMessage.NodeMessage:type_name -> main.NodeMessage
	11, // 9: main.ParamsBody.PeerRecords:type_name -> main.PeerRecord
	11, // 10: main.ParamsBody.MyPRecord:type_name -> main.PeerRecord
	10, // 11: main.ParamsBody.ElectionStatus:type_name -> main.ElectionStatus
	3,  // 12: main.LockMessage.Type:type_name -> main.LockMessage.LockType
	4,  // 13: main.ClientMessage.Type:type_name -> main.ClientMessage.MessageType
	17, // 14: main.ClientMessage.FileBody:type_name -> main.FileBodyMessage
	11, // 15: main.ClientMessage.ClientAddress:type_name -> main.PeerRecord
	15, // 16: main.ClientMessage.Lock:type_name -> main.LockMessage
	5,  // 17: main.FileBodyMessage.Type:type_name -> main.FileBodyMessage.MessageType
	6,  // 18: main.ServerMessage.Type:type_name -> main.ServerMessage.MessageType
	7,  // 19: main.EventMessage.Type:type_name -> main.EventMessage.MessageType
	13, // 20: main.NodeCommControlService.SendControlMessage:input_type -> main.ControlMessage
	13, // 21: main.NodeCommControlService.Shutdown:input_type -> main.ControlMessage
	8,  // 22: main.NodeCommPeerService.KeepAlive:input_type -> main.NodeMessage
	8,  // 23: main.NodeCommPeerService.SendMessage:input_type -> main.NodeMessage
	9,  // 24: main.NodeCommPeerService.SendCoordinationMessage:input_type -> main.CoordinationMessage
	16, // 25: main.NodeCommListeningService.SendClientMessage:input_type -> main.ClientMessage
	16, // 26: main.NodeCommListeningService.SendReadRequest:input_type -> main.ClientMessage
	16, // 27: main.NodeCommListeningService.SendWriteRequest:input_type -> main.ClientMessage
	13, // 28: main.ClientControlService.SendControlMessage:input_type -> main.ControlMessage
	13, // 29: main.ClientControlService.Shutdown:input_type -> main.ControlMessage
	16, // 30: main.ClientListeningService.SendClientMessage:input_type -> main.ClientMessage
	19, // 31: main.ClientListeningService.SendEventMessage:input_type -> main.EventMessage
	13, // 32: main.NodeCommControlService.SendControlMessage:output_type -> main.ControlMessage
	13, // 33: main.NodeCommControlService.Shutdown:output_type -> main.ControlMessage
	8,  // 34: main.NodeCommPeerService.KeepAlive:output_type -> main.NodeMessage
	8,  // 35: main.NodeCommPeerService.SendMessage:output_type -> main.NodeMessage
	9,  // 36: main.NodeCommPeerService.SendCoordinationMessage:output_type -> main.CoordinationMessage
	16, // 37: main.NodeCommListeningService.SendClientMessage:output_type -> main.ClientMessage
	16, // 38: main.NodeCommListeningService.SendReadRequest:output_type -> main.ClientMessage
	16, // 39: main.NodeCommListeningService.SendWriteRequest:output_type -> main.ClientMessage
	13, // 40: main.ClientControlService.SendControlMessage:output_type -> main.ControlMessage
	13, // 41: main.ClientControlService.Shutdown:output_type -> main.ControlMessage
	16, // 42: main.ClientListeningService.SendClientMessage:output_type -> main.ClientMessage
	19, // 43: main.ClientListeningService.SendEventMessage:output_type -> main.EventMessage
	32, // [32:44] is the sub-list for method output_type
	20, // [20:32] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ProtocChubby_Chubby_proto_init() }
func file_ProtocChubby_Chubby_proto_init() {
	if File_ProtocChubby_Chubby_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ProtocChubby_Chubby_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBodyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtocChubby_Chubby_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ProtocChubby_Chubby_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_ProtocChubby_Chubby_proto_goTypes,
		DependencyIndexes: file_ProtocChubby_Chubby_proto_depIdxs,
		EnumInfos:         file_ProtocChubby_Chubby_proto_enumTypes,
		MessageInfos:      file_ProtocChubby_Chubby_proto_msgTypes,
	}.Build()
	File_ProtocChubby_Chubby_proto = out.File
	file_ProtocChubby_Chubby_proto_rawDesc = nil
	file_ProtocChubby_Chubby_proto_goTypes = nil
	file_ProtocChubby_Chubby_proto_depIdxs = nil
}
