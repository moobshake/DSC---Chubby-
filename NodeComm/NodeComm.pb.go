// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: NodeComm.proto

package nodecomm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeMessage_MessageType int32

const (
	NodeMessage_Empty        NodeMessage_MessageType = 0
	NodeMessage_Ack          NodeMessage_MessageType = 1
	NodeMessage_Warning      NodeMessage_MessageType = 2
	NodeMessage_Error        NodeMessage_MessageType = 3
	NodeMessage_NotInNetwork NodeMessage_MessageType = 4
	NodeMessage_KeepAlive    NodeMessage_MessageType = 101
	NodeMessage_Standard     NodeMessage_MessageType = 102
)

// Enum value maps for NodeMessage_MessageType.
var (
	NodeMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "KeepAlive",
		102: "Standard",
	}
	NodeMessage_MessageType_value = map[string]int32{
		"Empty":        0,
		"Ack":          1,
		"Warning":      2,
		"Error":        3,
		"NotInNetwork": 4,
		"KeepAlive":    101,
		"Standard":     102,
	}
)

func (x NodeMessage_MessageType) Enum() *NodeMessage_MessageType {
	p := new(NodeMessage_MessageType)
	*p = x
	return p
}

func (x NodeMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeComm_proto_enumTypes[0].Descriptor()
}

func (NodeMessage_MessageType) Type() protoreflect.EnumType {
	return &file_NodeComm_proto_enumTypes[0]
}

func (x NodeMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeMessage_MessageType.Descriptor instead.
func (NodeMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{0, 0}
}

type CoordinationMessage_MessageType int32

const (
	CoordinationMessage_Empty                 CoordinationMessage_MessageType = 0
	CoordinationMessage_Ack                   CoordinationMessage_MessageType = 1
	CoordinationMessage_Warning               CoordinationMessage_MessageType = 2
	CoordinationMessage_Error                 CoordinationMessage_MessageType = 3
	CoordinationMessage_NotInNetwork          CoordinationMessage_MessageType = 4
	CoordinationMessage_ElectionResult        CoordinationMessage_MessageType = 101
	CoordinationMessage_ElectSelf             CoordinationMessage_MessageType = 102
	CoordinationMessage_RejectElect           CoordinationMessage_MessageType = 103
	CoordinationMessage_ReqToJoin             CoordinationMessage_MessageType = 104
	CoordinationMessage_RejectJoin            CoordinationMessage_MessageType = 105
	CoordinationMessage_PeerInformation       CoordinationMessage_MessageType = 106
	CoordinationMessage_RedirectToCoordinator CoordinationMessage_MessageType = 107
	CoordinationMessage_ReqToMerge            CoordinationMessage_MessageType = 108
	CoordinationMessage_RejectMerge           CoordinationMessage_MessageType = 109
	CoordinationMessage_ApptNewCoordinator    CoordinationMessage_MessageType = 110
	CoordinationMessage_ReqToLeave            CoordinationMessage_MessageType = 111
	CoordinationMessage_BadNodeReport         CoordinationMessage_MessageType = 112
	CoordinationMessage_NotMaster             CoordinationMessage_MessageType = 113
)

// Enum value maps for CoordinationMessage_MessageType.
var (
	CoordinationMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "ElectionResult",
		102: "ElectSelf",
		103: "RejectElect",
		104: "ReqToJoin",
		105: "RejectJoin",
		106: "PeerInformation",
		107: "RedirectToCoordinator",
		108: "ReqToMerge",
		109: "RejectMerge",
		110: "ApptNewCoordinator",
		111: "ReqToLeave",
		112: "BadNodeReport",
		113: "NotMaster",
	}
	CoordinationMessage_MessageType_value = map[string]int32{
		"Empty":                 0,
		"Ack":                   1,
		"Warning":               2,
		"Error":                 3,
		"NotInNetwork":          4,
		"ElectionResult":        101,
		"ElectSelf":             102,
		"RejectElect":           103,
		"ReqToJoin":             104,
		"RejectJoin":            105,
		"PeerInformation":       106,
		"RedirectToCoordinator": 107,
		"ReqToMerge":            108,
		"RejectMerge":           109,
		"ApptNewCoordinator":    110,
		"ReqToLeave":            111,
		"BadNodeReport":         112,
		"NotMaster":             113,
	}
)

func (x CoordinationMessage_MessageType) Enum() *CoordinationMessage_MessageType {
	p := new(CoordinationMessage_MessageType)
	*p = x
	return p
}

func (x CoordinationMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoordinationMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeComm_proto_enumTypes[1].Descriptor()
}

func (CoordinationMessage_MessageType) Type() protoreflect.EnumType {
	return &file_NodeComm_proto_enumTypes[1]
}

func (x CoordinationMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoordinationMessage_MessageType.Descriptor instead.
func (CoordinationMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{1, 0}
}

type ControlMessage_MessageType int32

const (
	ControlMessage_Empty         ControlMessage_MessageType = 0
	ControlMessage_Ack           ControlMessage_MessageType = 1
	ControlMessage_Warning       ControlMessage_MessageType = 2
	ControlMessage_Error         ControlMessage_MessageType = 3
	ControlMessage_NotInNetwork  ControlMessage_MessageType = 4
	ControlMessage_StopListening ControlMessage_MessageType = 101
	ControlMessage_InitParams    ControlMessage_MessageType = 102
	ControlMessage_UpdateParams  ControlMessage_MessageType = 103
	ControlMessage_GetStatus     ControlMessage_MessageType = 104
	ControlMessage_GetPeers      ControlMessage_MessageType = 105
	ControlMessage_AddPeer       ControlMessage_MessageType = 106
	ControlMessage_DelPeer       ControlMessage_MessageType = 107
	ControlMessage_Okay          ControlMessage_MessageType = 108
	ControlMessage_Message       ControlMessage_MessageType = 109
	ControlMessage_RawMessage    ControlMessage_MessageType = 110
	ControlMessage_JoinNetwork   ControlMessage_MessageType = 111
	ControlMessage_LeaveNetwork  ControlMessage_MessageType = 112
	ControlMessage_StartElection ControlMessage_MessageType = 113
	ControlMessage_GetParams     ControlMessage_MessageType = 114
	//Events
	ControlMessage_SubscribeFileModification ControlMessage_MessageType = 115
	ControlMessage_SubscribeLockAquisition   ControlMessage_MessageType = 116
	ControlMessage_SubscribeLockConflict     ControlMessage_MessageType = 117
	ControlMessage_SubscribeMasterFailover   ControlMessage_MessageType = 118
	ControlMessage_PublishFileModification   ControlMessage_MessageType = 119
	ControlMessage_PublishLockAquisition     ControlMessage_MessageType = 120
	ControlMessage_PublishLockConflict       ControlMessage_MessageType = 121
	ControlMessage_PublishMasterFailover     ControlMessage_MessageType = 122
)

// Enum value maps for ControlMessage_MessageType.
var (
	ControlMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "StopListening",
		102: "InitParams",
		103: "UpdateParams",
		104: "GetStatus",
		105: "GetPeers",
		106: "AddPeer",
		107: "DelPeer",
		108: "Okay",
		109: "Message",
		110: "RawMessage",
		111: "JoinNetwork",
		112: "LeaveNetwork",
		113: "StartElection",
		114: "GetParams",
		115: "SubscribeFileModification",
		116: "SubscribeLockAquisition",
		117: "SubscribeLockConflict",
		118: "SubscribeMasterFailover",
		119: "PublishFileModification",
		120: "PublishLockAquisition",
		121: "PublishLockConflict",
		122: "PublishMasterFailover",
	}
	ControlMessage_MessageType_value = map[string]int32{
		"Empty":                     0,
		"Ack":                       1,
		"Warning":                   2,
		"Error":                     3,
		"NotInNetwork":              4,
		"StopListening":             101,
		"InitParams":                102,
		"UpdateParams":              103,
		"GetStatus":                 104,
		"GetPeers":                  105,
		"AddPeer":                   106,
		"DelPeer":                   107,
		"Okay":                      108,
		"Message":                   109,
		"RawMessage":                110,
		"JoinNetwork":               111,
		"LeaveNetwork":              112,
		"StartElection":             113,
		"GetParams":                 114,
		"SubscribeFileModification": 115,
		"SubscribeLockAquisition":   116,
		"SubscribeLockConflict":     117,
		"SubscribeMasterFailover":   118,
		"PublishFileModification":   119,
		"PublishLockAquisition":     120,
		"PublishLockConflict":       121,
		"PublishMasterFailover":     122,
	}
)

func (x ControlMessage_MessageType) Enum() *ControlMessage_MessageType {
	p := new(ControlMessage_MessageType)
	*p = x
	return p
}

func (x ControlMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeComm_proto_enumTypes[2].Descriptor()
}

func (ControlMessage_MessageType) Type() protoreflect.EnumType {
	return &file_NodeComm_proto_enumTypes[2]
}

func (x ControlMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlMessage_MessageType.Descriptor instead.
func (ControlMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{5, 0}
}

type ClientMessage_MessageType int32

const (
	ClientMessage_Empty                     ClientMessage_MessageType = 0
	ClientMessage_Ack                       ClientMessage_MessageType = 1
	ClientMessage_Warning                   ClientMessage_MessageType = 2
	ClientMessage_Error                     ClientMessage_MessageType = 3
	ClientMessage_NotInNetwork              ClientMessage_MessageType = 4
	ClientMessage_FileWrite                 ClientMessage_MessageType = 101
	ClientMessage_FileRead                  ClientMessage_MessageType = 102
	ClientMessage_ReqLock                   ClientMessage_MessageType = 103
	ClientMessage_RelLock                   ClientMessage_MessageType = 104
	ClientMessage_JoinNetwork               ClientMessage_MessageType = 105
	ClientMessage_LeaveNetwork              ClientMessage_MessageType = 106
	ClientMessage_FindMaster                ClientMessage_MessageType = 107
	ClientMessage_SubscribeFileModification ClientMessage_MessageType = 108
	ClientMessage_SubscribeLockAquisition   ClientMessage_MessageType = 109
	ClientMessage_SubscribeLockConflict     ClientMessage_MessageType = 110
	ClientMessage_SubscribeMasterFailover   ClientMessage_MessageType = 111
)

// Enum value maps for ClientMessage_MessageType.
var (
	ClientMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "FileWrite",
		102: "FileRead",
		103: "ReqLock",
		104: "RelLock",
		105: "JoinNetwork",
		106: "LeaveNetwork",
		107: "FindMaster",
		108: "SubscribeFileModification",
		109: "SubscribeLockAquisition",
		110: "SubscribeLockConflict",
		111: "SubscribeMasterFailover",
	}
	ClientMessage_MessageType_value = map[string]int32{
		"Empty":                     0,
		"Ack":                       1,
		"Warning":                   2,
		"Error":                     3,
		"NotInNetwork":              4,
		"FileWrite":                 101,
		"FileRead":                  102,
		"ReqLock":                   103,
		"RelLock":                   104,
		"JoinNetwork":               105,
		"LeaveNetwork":              106,
		"FindMaster":                107,
		"SubscribeFileModification": 108,
		"SubscribeLockAquisition":   109,
		"SubscribeLockConflict":     110,
		"SubscribeMasterFailover":   111,
	}
)

func (x ClientMessage_MessageType) Enum() *ClientMessage_MessageType {
	p := new(ClientMessage_MessageType)
	*p = x
	return p
}

func (x ClientMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeComm_proto_enumTypes[3].Descriptor()
}

func (ClientMessage_MessageType) Type() protoreflect.EnumType {
	return &file_NodeComm_proto_enumTypes[3]
}

func (x ClientMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientMessage_MessageType.Descriptor instead.
func (ClientMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{7, 0}
}

type ServerMessage_MessageType int32

const (
	ServerMessage_Empty        ServerMessage_MessageType = 0
	ServerMessage_Ack          ServerMessage_MessageType = 1
	ServerMessage_Warning      ServerMessage_MessageType = 2
	ServerMessage_Error        ServerMessage_MessageType = 3
	ServerMessage_NotInNetwork ServerMessage_MessageType = 4
)

// Enum value maps for ServerMessage_MessageType.
var (
	ServerMessage_MessageType_name = map[int32]string{
		0: "Empty",
		1: "Ack",
		2: "Warning",
		3: "Error",
		4: "NotInNetwork",
	}
	ServerMessage_MessageType_value = map[string]int32{
		"Empty":        0,
		"Ack":          1,
		"Warning":      2,
		"Error":        3,
		"NotInNetwork": 4,
	}
)

func (x ServerMessage_MessageType) Enum() *ServerMessage_MessageType {
	p := new(ServerMessage_MessageType)
	*p = x
	return p
}

func (x ServerMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeComm_proto_enumTypes[4].Descriptor()
}

func (ServerMessage_MessageType) Type() protoreflect.EnumType {
	return &file_NodeComm_proto_enumTypes[4]
}

func (x ServerMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerMessage_MessageType.Descriptor instead.
func (ServerMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{9, 0}
}

type EventMessage_MessageType int32

const (
	EventMessage_Empty               EventMessage_MessageType = 0
	EventMessage_Ack                 EventMessage_MessageType = 1
	EventMessage_Warning             EventMessage_MessageType = 2
	EventMessage_Error               EventMessage_MessageType = 3
	EventMessage_NotInNetwork        EventMessage_MessageType = 4
	EventMessage_MasterFailOver      EventMessage_MessageType = 101
	EventMessage_FileContentModified EventMessage_MessageType = 102
	EventMessage_LockAquisition      EventMessage_MessageType = 103
	EventMessage_ConflictingLock     EventMessage_MessageType = 104
)

// Enum value maps for EventMessage_MessageType.
var (
	EventMessage_MessageType_name = map[int32]string{
		0:   "Empty",
		1:   "Ack",
		2:   "Warning",
		3:   "Error",
		4:   "NotInNetwork",
		101: "MasterFailOver",
		102: "FileContentModified",
		103: "LockAquisition",
		104: "ConflictingLock",
	}
	EventMessage_MessageType_value = map[string]int32{
		"Empty":               0,
		"Ack":                 1,
		"Warning":             2,
		"Error":               3,
		"NotInNetwork":        4,
		"MasterFailOver":      101,
		"FileContentModified": 102,
		"LockAquisition":      103,
		"ConflictingLock":     104,
	}
)

func (x EventMessage_MessageType) Enum() *EventMessage_MessageType {
	p := new(EventMessage_MessageType)
	*p = x
	return p
}

func (x EventMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_NodeComm_proto_enumTypes[5].Descriptor()
}

func (EventMessage_MessageType) Type() protoreflect.EnumType {
	return &file_NodeComm_proto_enumTypes[5]
}

func (x EventMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventMessage_MessageType.Descriptor instead.
func (EventMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{10, 0}
}

type NodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPRecord  *PeerRecord             `protobuf:"bytes,1,opt,name=fromPRecord,proto3" json:"fromPRecord,omitempty"`
	ToID         int32                   `protobuf:"varint,2,opt,name=ToID,proto3" json:"ToID,omitempty"`
	Type         NodeMessage_MessageType `protobuf:"varint,3,opt,name=Type,proto3,enum=NodeComm.NodeMessage_MessageType" json:"Type,omitempty"`
	Spare        int32                   `protobuf:"varint,4,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Comment      string                  `protobuf:"bytes,5,opt,name=Comment,proto3" json:"Comment,omitempty"`
	StandardBody *StandardBody           `protobuf:"bytes,6,opt,name=StandardBody,proto3" json:"StandardBody,omitempty"`
}

func (x *NodeMessage) Reset() {
	*x = NodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMessage) ProtoMessage() {}

func (x *NodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMessage.ProtoReflect.Descriptor instead.
func (*NodeMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{0}
}

func (x *NodeMessage) GetFromPRecord() *PeerRecord {
	if x != nil {
		return x.FromPRecord
	}
	return nil
}

func (x *NodeMessage) GetToID() int32 {
	if x != nil {
		return x.ToID
	}
	return 0
}

func (x *NodeMessage) GetType() NodeMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return NodeMessage_Empty
}

func (x *NodeMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *NodeMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NodeMessage) GetStandardBody() *StandardBody {
	if x != nil {
		return x.StandardBody
	}
	return nil
}

type CoordinationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPRecord *PeerRecord                     `protobuf:"bytes,1,opt,name=FromPRecord,proto3" json:"FromPRecord,omitempty"`
	Spare       int32                           `protobuf:"varint,2,opt,name=spare,proto3" json:"spare,omitempty"`
	Type        CoordinationMessage_MessageType `protobuf:"varint,3,opt,name=Type,proto3,enum=NodeComm.CoordinationMessage_MessageType" json:"Type,omitempty"`
	Comment     string                          `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	PeerRecords []*PeerRecord                   `protobuf:"bytes,5,rep,name=PeerRecords,proto3" json:"PeerRecords,omitempty"`
}

func (x *CoordinationMessage) Reset() {
	*x = CoordinationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinationMessage) ProtoMessage() {}

func (x *CoordinationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinationMessage.ProtoReflect.Descriptor instead.
func (*CoordinationMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{1}
}

func (x *CoordinationMessage) GetFromPRecord() *PeerRecord {
	if x != nil {
		return x.FromPRecord
	}
	return nil
}

func (x *CoordinationMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *CoordinationMessage) GetType() CoordinationMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return CoordinationMessage_Empty
}

func (x *CoordinationMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CoordinationMessage) GetPeerRecords() []*PeerRecord {
	if x != nil {
		return x.PeerRecords
	}
	return nil
}

//1 -> False; 2 -> True
type ElectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OngoingElection int32 `protobuf:"varint,1,opt,name=OngoingElection,proto3" json:"OngoingElection,omitempty"`
	IsWinning       int32 `protobuf:"varint,2,opt,name=IsWinning,proto3" json:"IsWinning,omitempty"`
	Active          int32 `protobuf:"varint,3,opt,name=Active,proto3" json:"Active,omitempty"`
	TimeoutDuration int32 `protobuf:"varint,4,opt,name=TimeoutDuration,proto3" json:"TimeoutDuration,omitempty"`
}

func (x *ElectionStatus) Reset() {
	*x = ElectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionStatus) ProtoMessage() {}

func (x *ElectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionStatus.ProtoReflect.Descriptor instead.
func (*ElectionStatus) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{2}
}

func (x *ElectionStatus) GetOngoingElection() int32 {
	if x != nil {
		return x.OngoingElection
	}
	return 0
}

func (x *ElectionStatus) GetIsWinning() int32 {
	if x != nil {
		return x.IsWinning
	}
	return 0
}

func (x *ElectionStatus) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ElectionStatus) GetTimeoutDuration() int32 {
	if x != nil {
		return x.TimeoutDuration
	}
	return 0
}

type PeerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Port    string `protobuf:"bytes,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *PeerRecord) Reset() {
	*x = PeerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRecord) ProtoMessage() {}

func (x *PeerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRecord.ProtoReflect.Descriptor instead.
func (*PeerRecord) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{3}
}

func (x *PeerRecord) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PeerRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerRecord) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type StandardBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StandardBody) Reset() {
	*x = StandardBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardBody) ProtoMessage() {}

func (x *StandardBody) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardBody.ProtoReflect.Descriptor instead.
func (*StandardBody) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{4}
}

func (x *StandardBody) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ControlMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=NodeComm.ControlMessage_MessageType" json:"Type,omitempty"`
	Spare       int32                      `protobuf:"varint,2,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Comment     string                     `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	ParamsBody  *ParamsBody                `protobuf:"bytes,4,opt,name=ParamsBody,proto3" json:"ParamsBody,omitempty"`
	NodeMessage *NodeMessage               `protobuf:"bytes,5,opt,name=NodeMessage,proto3" json:"NodeMessage,omitempty"`
}

func (x *ControlMessage) Reset() {
	*x = ControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessage) ProtoMessage() {}

func (x *ControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessage.ProtoReflect.Descriptor instead.
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{5}
}

func (x *ControlMessage) GetType() ControlMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ControlMessage_Empty
}

func (x *ControlMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ControlMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ControlMessage) GetParamsBody() *ParamsBody {
	if x != nil {
		return x.ParamsBody
	}
	return nil
}

func (x *ControlMessage) GetNodeMessage() *NodeMessage {
	if x != nil {
		return x.NodeMessage
	}
	return nil
}

type ParamsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spare          int32           `protobuf:"varint,1,opt,name=Spare,proto3" json:"Spare,omitempty"`
	PeerRecords    []*PeerRecord   `protobuf:"bytes,2,rep,name=PeerRecords,proto3" json:"PeerRecords,omitempty"`
	MyPRecord      *PeerRecord     `protobuf:"bytes,3,opt,name=MyPRecord,proto3" json:"MyPRecord,omitempty"`
	IdOfMaster     int32           `protobuf:"varint,4,opt,name=IdOfMaster,proto3" json:"IdOfMaster,omitempty"`
	ElectionStatus *ElectionStatus `protobuf:"bytes,5,opt,name=ElectionStatus,proto3" json:"ElectionStatus,omitempty"`
	Verbose        int32           `protobuf:"varint,6,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *ParamsBody) Reset() {
	*x = ParamsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamsBody) ProtoMessage() {}

func (x *ParamsBody) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamsBody.ProtoReflect.Descriptor instead.
func (*ParamsBody) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{6}
}

func (x *ParamsBody) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ParamsBody) GetPeerRecords() []*PeerRecord {
	if x != nil {
		return x.PeerRecords
	}
	return nil
}

func (x *ParamsBody) GetMyPRecord() *PeerRecord {
	if x != nil {
		return x.MyPRecord
	}
	return nil
}

func (x *ParamsBody) GetIdOfMaster() int32 {
	if x != nil {
		return x.IdOfMaster
	}
	return 0
}

func (x *ParamsBody) GetElectionStatus() *ElectionStatus {
	if x != nil {
		return x.ElectionStatus
	}
	return nil
}

func (x *ParamsBody) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID       int32                     `protobuf:"varint,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	Type           ClientMessage_MessageType `protobuf:"varint,2,opt,name=Type,proto3,enum=NodeComm.ClientMessage_MessageType" json:"Type,omitempty"`
	Spare          int32                     `protobuf:"varint,3,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Message        int32                     `protobuf:"varint,4,opt,name=Message,proto3" json:"Message,omitempty"`
	FileBody       *FileBody                 `protobuf:"bytes,5,opt,name=FileBody,proto3" json:"FileBody,omitempty"`
	ClientAddress  *PeerRecord               `protobuf:"bytes,6,opt,name=ClientAddress,proto3" json:"ClientAddress,omitempty"`
	StringMessages string                    `protobuf:"bytes,7,opt,name=StringMessages,proto3" json:"StringMessages,omitempty"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{7}
}

func (x *ClientMessage) GetClientID() int32 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *ClientMessage) GetType() ClientMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ClientMessage_Empty
}

func (x *ClientMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ClientMessage) GetMessage() int32 {
	if x != nil {
		return x.Message
	}
	return 0
}

func (x *ClientMessage) GetFileBody() *FileBody {
	if x != nil {
		return x.FileBody
	}
	return nil
}

func (x *ClientMessage) GetClientAddress() *PeerRecord {
	if x != nil {
		return x.ClientAddress
	}
	return nil
}

func (x *ClientMessage) GetStringMessages() string {
	if x != nil {
		return x.StringMessages
	}
	return ""
}

type FileBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *FileBody) Reset() {
	*x = FileBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBody) ProtoMessage() {}

func (x *FileBody) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBody.ProtoReflect.Descriptor instead.
func (*FileBody) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{8}
}

func (x *FileBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ServerMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=NodeComm.ServerMessage_MessageType" json:"Type,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{9}
}

func (x *ServerMessage) GetType() ServerMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ServerMessage_Empty
}

type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     EventMessage_MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=NodeComm.EventMessage_MessageType" json:"Type,omitempty"`
	FileName string                   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	LockName string                   `protobuf:"bytes,3,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{10}
}

func (x *EventMessage) GetType() EventMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return EventMessage_Empty
}

func (x *EventMessage) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *EventMessage) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

var File_NodeComm_proto protoreflect.FileDescriptor

var file_NodeComm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x22, 0xe6, 0x02, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x68, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x10, 0x66, 0x22, 0xb0, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x66, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x68, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6a,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x65, 0x71, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x6d, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x70, 0x70, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x54, 0x6f, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x10, 0x71, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x28, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xef, 0x05, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x37, 0x0a, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x68, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x10, 0x6a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x10, 0x6b, 0x12,
	0x08, 0x0a, 0x04, 0x4f, 0x6b, 0x61, 0x79, 0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x6f, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x10, 0x75, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x76, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x77, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x78, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x79,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x7a, 0x22, 0x8a, 0x02, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x4d, 0x79, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x09, 0x4d, 0x79, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0xd4, 0x04, 0x0a, 0x0d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x53, 0x70, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x3a, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x10, 0x66, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x69, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x6a, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x69, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x6b, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x10, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x6f, 0x22,
	0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x22, 0xa4, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x68, 0x32, 0xce,
	0x04, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42,
	0x14, 0x5a, 0x12, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x3b, 0x6e, 0x6f, 0x64,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_NodeComm_proto_rawDescOnce sync.Once
	file_NodeComm_proto_rawDescData = file_NodeComm_proto_rawDesc
)

func file_NodeComm_proto_rawDescGZIP() []byte {
	file_NodeComm_proto_rawDescOnce.Do(func() {
		file_NodeComm_proto_rawDescData = protoimpl.X.CompressGZIP(file_NodeComm_proto_rawDescData)
	})
	return file_NodeComm_proto_rawDescData
}

var file_NodeComm_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_NodeComm_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_NodeComm_proto_goTypes = []interface{}{
	(NodeMessage_MessageType)(0),         // 0: NodeComm.NodeMessage.MessageType
	(CoordinationMessage_MessageType)(0), // 1: NodeComm.CoordinationMessage.MessageType
	(ControlMessage_MessageType)(0),      // 2: NodeComm.ControlMessage.MessageType
	(ClientMessage_MessageType)(0),       // 3: NodeComm.ClientMessage.MessageType
	(ServerMessage_MessageType)(0),       // 4: NodeComm.ServerMessage.MessageType
	(EventMessage_MessageType)(0),        // 5: NodeComm.EventMessage.MessageType
	(*NodeMessage)(nil),                  // 6: NodeComm.NodeMessage
	(*CoordinationMessage)(nil),          // 7: NodeComm.CoordinationMessage
	(*ElectionStatus)(nil),               // 8: NodeComm.ElectionStatus
	(*PeerRecord)(nil),                   // 9: NodeComm.PeerRecord
	(*StandardBody)(nil),                 // 10: NodeComm.StandardBody
	(*ControlMessage)(nil),               // 11: NodeComm.ControlMessage
	(*ParamsBody)(nil),                   // 12: NodeComm.ParamsBody
	(*ClientMessage)(nil),                // 13: NodeComm.ClientMessage
	(*FileBody)(nil),                     // 14: NodeComm.FileBody
	(*ServerMessage)(nil),                // 15: NodeComm.ServerMessage
	(*EventMessage)(nil),                 // 16: NodeComm.EventMessage
}
var file_NodeComm_proto_depIdxs = []int32{
	9,  // 0: NodeComm.NodeMessage.fromPRecord:type_name -> NodeComm.PeerRecord
	0,  // 1: NodeComm.NodeMessage.Type:type_name -> NodeComm.NodeMessage.MessageType
	10, // 2: NodeComm.NodeMessage.StandardBody:type_name -> NodeComm.StandardBody
	9,  // 3: NodeComm.CoordinationMessage.FromPRecord:type_name -> NodeComm.PeerRecord
	1,  // 4: NodeComm.CoordinationMessage.Type:type_name -> NodeComm.CoordinationMessage.MessageType
	9,  // 5: NodeComm.CoordinationMessage.PeerRecords:type_name -> NodeComm.PeerRecord
	2,  // 6: NodeComm.ControlMessage.Type:type_name -> NodeComm.ControlMessage.MessageType
	12, // 7: NodeComm.ControlMessage.ParamsBody:type_name -> NodeComm.ParamsBody
	6,  // 8: NodeComm.ControlMessage.NodeMessage:type_name -> NodeComm.NodeMessage
	9,  // 9: NodeComm.ParamsBody.PeerRecords:type_name -> NodeComm.PeerRecord
	9,  // 10: NodeComm.ParamsBody.MyPRecord:type_name -> NodeComm.PeerRecord
	8,  // 11: NodeComm.ParamsBody.ElectionStatus:type_name -> NodeComm.ElectionStatus
	3,  // 12: NodeComm.ClientMessage.Type:type_name -> NodeComm.ClientMessage.MessageType
	14, // 13: NodeComm.ClientMessage.FileBody:type_name -> NodeComm.FileBody
	9,  // 14: NodeComm.ClientMessage.ClientAddress:type_name -> NodeComm.PeerRecord
	4,  // 15: NodeComm.ServerMessage.Type:type_name -> NodeComm.ServerMessage.MessageType
	5,  // 16: NodeComm.EventMessage.Type:type_name -> NodeComm.EventMessage.MessageType
	6,  // 17: NodeComm.NodeCommService.KeepAlive:input_type -> NodeComm.NodeMessage
	6,  // 18: NodeComm.NodeCommService.SendMessage:input_type -> NodeComm.NodeMessage
	7,  // 19: NodeComm.NodeCommService.SendCoordinationMessage:input_type -> NodeComm.CoordinationMessage
	11, // 20: NodeComm.NodeCommService.Shutdown:input_type -> NodeComm.ControlMessage
	11, // 21: NodeComm.NodeCommService.SendControlMessage:input_type -> NodeComm.ControlMessage
	13, // 22: NodeComm.NodeCommService.SendClientMessage:input_type -> NodeComm.ClientMessage
	15, // 23: NodeComm.NodeCommService.SendServerMessage:input_type -> NodeComm.ServerMessage
	16, // 24: NodeComm.NodeCommService.SendEventMessage:input_type -> NodeComm.EventMessage
	6,  // 25: NodeComm.NodeCommService.KeepAlive:output_type -> NodeComm.NodeMessage
	6,  // 26: NodeComm.NodeCommService.SendMessage:output_type -> NodeComm.NodeMessage
	7,  // 27: NodeComm.NodeCommService.SendCoordinationMessage:output_type -> NodeComm.CoordinationMessage
	11, // 28: NodeComm.NodeCommService.Shutdown:output_type -> NodeComm.ControlMessage
	11, // 29: NodeComm.NodeCommService.SendControlMessage:output_type -> NodeComm.ControlMessage
	13, // 30: NodeComm.NodeCommService.SendClientMessage:output_type -> NodeComm.ClientMessage
	13, // 31: NodeComm.NodeCommService.SendServerMessage:output_type -> NodeComm.ClientMessage
	16, // 32: NodeComm.NodeCommService.SendEventMessage:output_type -> NodeComm.EventMessage
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_NodeComm_proto_init() }
func file_NodeComm_proto_init() {
	if File_NodeComm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NodeComm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NodeComm_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_NodeComm_proto_goTypes,
		DependencyIndexes: file_NodeComm_proto_depIdxs,
		EnumInfos:         file_NodeComm_proto_enumTypes,
		MessageInfos:      file_NodeComm_proto_msgTypes,
	}.Build()
	File_NodeComm_proto = out.File
	file_NodeComm_proto_rawDesc = nil
	file_NodeComm_proto_goTypes = nil
	file_NodeComm_proto_depIdxs = nil
}
