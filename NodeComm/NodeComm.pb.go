// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: NodeComm.proto

package nodecomm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPRecord  *PeerRecord   `protobuf:"bytes,1,opt,name=fromPRecord,proto3" json:"fromPRecord,omitempty"`
	ToID         int32         `protobuf:"varint,2,opt,name=ToID,proto3" json:"ToID,omitempty"`
	Type         int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Spare        int32         `protobuf:"varint,4,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Comment      string        `protobuf:"bytes,5,opt,name=Comment,proto3" json:"Comment,omitempty"`
	StandardBody *StandardBody `protobuf:"bytes,6,opt,name=StandardBody,proto3" json:"StandardBody,omitempty"`
}

func (x *NodeMessage) Reset() {
	*x = NodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMessage) ProtoMessage() {}

func (x *NodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMessage.ProtoReflect.Descriptor instead.
func (*NodeMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{0}
}

func (x *NodeMessage) GetFromPRecord() *PeerRecord {
	if x != nil {
		return x.FromPRecord
	}
	return nil
}

func (x *NodeMessage) GetToID() int32 {
	if x != nil {
		return x.ToID
	}
	return 0
}

func (x *NodeMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NodeMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *NodeMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NodeMessage) GetStandardBody() *StandardBody {
	if x != nil {
		return x.StandardBody
	}
	return nil
}

type CoordinationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPRecord *PeerRecord   `protobuf:"bytes,1,opt,name=FromPRecord,proto3" json:"FromPRecord,omitempty"`
	Spare       int32         `protobuf:"varint,2,opt,name=spare,proto3" json:"spare,omitempty"`
	Type        int32         `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Comment     string        `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	PeerRecords []*PeerRecord `protobuf:"bytes,5,rep,name=PeerRecords,proto3" json:"PeerRecords,omitempty"`
}

func (x *CoordinationMessage) Reset() {
	*x = CoordinationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinationMessage) ProtoMessage() {}

func (x *CoordinationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinationMessage.ProtoReflect.Descriptor instead.
func (*CoordinationMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{1}
}

func (x *CoordinationMessage) GetFromPRecord() *PeerRecord {
	if x != nil {
		return x.FromPRecord
	}
	return nil
}

func (x *CoordinationMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *CoordinationMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CoordinationMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CoordinationMessage) GetPeerRecords() []*PeerRecord {
	if x != nil {
		return x.PeerRecords
	}
	return nil
}

//1 -> False; 2 -> True
type ElectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OngoingElection int32 `protobuf:"varint,1,opt,name=OngoingElection,proto3" json:"OngoingElection,omitempty"`
	IsWinning       int32 `protobuf:"varint,2,opt,name=IsWinning,proto3" json:"IsWinning,omitempty"`
	Active          int32 `protobuf:"varint,3,opt,name=Active,proto3" json:"Active,omitempty"`
	TimeoutDuration int32 `protobuf:"varint,4,opt,name=TimeoutDuration,proto3" json:"TimeoutDuration,omitempty"`
}

func (x *ElectionStatus) Reset() {
	*x = ElectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionStatus) ProtoMessage() {}

func (x *ElectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionStatus.ProtoReflect.Descriptor instead.
func (*ElectionStatus) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{2}
}

func (x *ElectionStatus) GetOngoingElection() int32 {
	if x != nil {
		return x.OngoingElection
	}
	return 0
}

func (x *ElectionStatus) GetIsWinning() int32 {
	if x != nil {
		return x.IsWinning
	}
	return 0
}

func (x *ElectionStatus) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ElectionStatus) GetTimeoutDuration() int32 {
	if x != nil {
		return x.TimeoutDuration
	}
	return 0
}

type PeerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Port    string `protobuf:"bytes,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *PeerRecord) Reset() {
	*x = PeerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerRecord) ProtoMessage() {}

func (x *PeerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerRecord.ProtoReflect.Descriptor instead.
func (*PeerRecord) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{3}
}

func (x *PeerRecord) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PeerRecord) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerRecord) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type StandardBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StandardBody) Reset() {
	*x = StandardBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardBody) ProtoMessage() {}

func (x *StandardBody) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardBody.ProtoReflect.Descriptor instead.
func (*StandardBody) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{4}
}

func (x *StandardBody) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int32        `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Spare       int32        `protobuf:"varint,2,opt,name=Spare,proto3" json:"Spare,omitempty"`
	Comment     string       `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	ParamsBody  *ParamsBody  `protobuf:"bytes,4,opt,name=ParamsBody,proto3" json:"ParamsBody,omitempty"`
	NodeMessage *NodeMessage `protobuf:"bytes,5,opt,name=NodeMessage,proto3" json:"NodeMessage,omitempty"`
}

func (x *ControlMessage) Reset() {
	*x = ControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessage) ProtoMessage() {}

func (x *ControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessage.ProtoReflect.Descriptor instead.
func (*ControlMessage) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{5}
}

func (x *ControlMessage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ControlMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ControlMessage) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ControlMessage) GetParamsBody() *ParamsBody {
	if x != nil {
		return x.ParamsBody
	}
	return nil
}

func (x *ControlMessage) GetNodeMessage() *NodeMessage {
	if x != nil {
		return x.NodeMessage
	}
	return nil
}

type ParamsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spare          int32           `protobuf:"varint,1,opt,name=Spare,proto3" json:"Spare,omitempty"`
	PeerRecords    []*PeerRecord   `protobuf:"bytes,2,rep,name=PeerRecords,proto3" json:"PeerRecords,omitempty"`
	MyPRecord      *PeerRecord     `protobuf:"bytes,3,opt,name=MyPRecord,proto3" json:"MyPRecord,omitempty"`
	IdOfMaster     int32           `protobuf:"varint,4,opt,name=IdOfMaster,proto3" json:"IdOfMaster,omitempty"`
	ElectionStatus *ElectionStatus `protobuf:"bytes,5,opt,name=ElectionStatus,proto3" json:"ElectionStatus,omitempty"`
	Verbose        int32           `protobuf:"varint,6,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
}

func (x *ParamsBody) Reset() {
	*x = ParamsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeComm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamsBody) ProtoMessage() {}

func (x *ParamsBody) ProtoReflect() protoreflect.Message {
	mi := &file_NodeComm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamsBody.ProtoReflect.Descriptor instead.
func (*ParamsBody) Descriptor() ([]byte, []int) {
	return file_NodeComm_proto_rawDescGZIP(), []int{6}
}

func (x *ParamsBody) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ParamsBody) GetPeerRecords() []*PeerRecord {
	if x != nil {
		return x.PeerRecords
	}
	return nil
}

func (x *ParamsBody) GetMyPRecord() *PeerRecord {
	if x != nil {
		return x.MyPRecord
	}
	return nil
}

func (x *ParamsBody) GetIdOfMaster() int32 {
	if x != nil {
		return x.IdOfMaster
	}
	return 0
}

func (x *ParamsBody) GetElectionStatus() *ElectionStatus {
	if x != nil {
		return x.ElectionStatus
	}
	return nil
}

func (x *ParamsBody) GetVerbose() int32 {
	if x != nil {
		return x.Verbose
	}
	return 0
}

var File_NodeComm_proto protoreflect.FileDescriptor

var file_NodeComm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x22, 0xd9, 0x01, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4a, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x28, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x4d, 0x79, 0x50, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x09, 0x4d, 0x79, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x64, 0x4f, 0x66, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x32, 0xf6, 0x02, 0x0a, 0x0f, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x42, 0x14, 0x5a, 0x12, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x3b, 0x6e,
	0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_NodeComm_proto_rawDescOnce sync.Once
	file_NodeComm_proto_rawDescData = file_NodeComm_proto_rawDesc
)

func file_NodeComm_proto_rawDescGZIP() []byte {
	file_NodeComm_proto_rawDescOnce.Do(func() {
		file_NodeComm_proto_rawDescData = protoimpl.X.CompressGZIP(file_NodeComm_proto_rawDescData)
	})
	return file_NodeComm_proto_rawDescData
}

var file_NodeComm_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_NodeComm_proto_goTypes = []interface{}{
	(*NodeMessage)(nil),         // 0: NodeComm.NodeMessage
	(*CoordinationMessage)(nil), // 1: NodeComm.CoordinationMessage
	(*ElectionStatus)(nil),      // 2: NodeComm.ElectionStatus
	(*PeerRecord)(nil),          // 3: NodeComm.PeerRecord
	(*StandardBody)(nil),        // 4: NodeComm.StandardBody
	(*ControlMessage)(nil),      // 5: NodeComm.ControlMessage
	(*ParamsBody)(nil),          // 6: NodeComm.ParamsBody
}
var file_NodeComm_proto_depIdxs = []int32{
	3,  // 0: NodeComm.NodeMessage.fromPRecord:type_name -> NodeComm.PeerRecord
	4,  // 1: NodeComm.NodeMessage.StandardBody:type_name -> NodeComm.StandardBody
	3,  // 2: NodeComm.CoordinationMessage.FromPRecord:type_name -> NodeComm.PeerRecord
	3,  // 3: NodeComm.CoordinationMessage.PeerRecords:type_name -> NodeComm.PeerRecord
	6,  // 4: NodeComm.ControlMessage.ParamsBody:type_name -> NodeComm.ParamsBody
	0,  // 5: NodeComm.ControlMessage.NodeMessage:type_name -> NodeComm.NodeMessage
	3,  // 6: NodeComm.ParamsBody.PeerRecords:type_name -> NodeComm.PeerRecord
	3,  // 7: NodeComm.ParamsBody.MyPRecord:type_name -> NodeComm.PeerRecord
	2,  // 8: NodeComm.ParamsBody.ElectionStatus:type_name -> NodeComm.ElectionStatus
	0,  // 9: NodeComm.NodeCommService.KeepAlive:input_type -> NodeComm.NodeMessage
	0,  // 10: NodeComm.NodeCommService.SendMessage:input_type -> NodeComm.NodeMessage
	1,  // 11: NodeComm.NodeCommService.SendCoordinationMessage:input_type -> NodeComm.CoordinationMessage
	5,  // 12: NodeComm.NodeCommService.Shutdown:input_type -> NodeComm.ControlMessage
	5,  // 13: NodeComm.NodeCommService.SendControlMessage:input_type -> NodeComm.ControlMessage
	0,  // 14: NodeComm.NodeCommService.KeepAlive:output_type -> NodeComm.NodeMessage
	0,  // 15: NodeComm.NodeCommService.SendMessage:output_type -> NodeComm.NodeMessage
	1,  // 16: NodeComm.NodeCommService.SendCoordinationMessage:output_type -> NodeComm.CoordinationMessage
	5,  // 17: NodeComm.NodeCommService.Shutdown:output_type -> NodeComm.ControlMessage
	5,  // 18: NodeComm.NodeCommService.SendControlMessage:output_type -> NodeComm.ControlMessage
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_NodeComm_proto_init() }
func file_NodeComm_proto_init() {
	if File_NodeComm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NodeComm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeComm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NodeComm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_NodeComm_proto_goTypes,
		DependencyIndexes: file_NodeComm_proto_depIdxs,
		MessageInfos:      file_NodeComm_proto_msgTypes,
	}.Build()
	File_NodeComm_proto = out.File
	file_NodeComm_proto_rawDesc = nil
	file_NodeComm_proto_goTypes = nil
	file_NodeComm_proto_depIdxs = nil
}
